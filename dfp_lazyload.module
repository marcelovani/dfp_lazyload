<?php
/**
 * @file
 * Main module file for DFP Lazyload.
 */

/**
 * Implements hook_menu().
 */
function dfp_lazyload_menu() {
  $items = array();
  $items['admin/structure/dfp_ads/lazyload'] = array(
    'title' => 'DFP Lazyload',
    'description' => 'Configure DFP Lazyload.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dfp_lazyload_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function dfp_lazyload_settings_form() {
  $form = array();

  // @TODO: Allow more than one slot configuration.
  $form['dfp_lazyload_machinename'] = array(
    '#type' => 'textfield',
    '#title' => t('Ad Slot'),
    '#maxlength' => 255,
    '#default_value' => variable_get('dfp_lazyload_machinename'),
    '#description' => t('Specify which ad slot to load.'),
    '#required' => TRUE,
  );

  $form['dfp_lazyload_frequency'] = array(
    '#type' => 'textfield',
    '#title' => t('Frequency'),
    '#maxlength' => 255,
    '#default_value' => variable_get('dfp_lazyload_frequency', 3),
    '#description' => t('Load a new ad slot every N items.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Lazy load callback.
 *
 * @param $ad_slot_machinename String The machine name of the ad slot.
 */
function dfp_lazyload_load_slot($ad_slot_machinename) {
  // Add inline script.
  $ad_slot = '';
  if (module_exists('dfp')) {
    $tag = dfp_tag($ad_slot_machinename);
    if (empty($tag)) {
      drupal_set_message(t('Invalid dfp tag: %name', array('%name' => $ad_slot_machinename)), 'error');
      return;
    }

    // When we provide a DFP slot as configuration for dfp_lazyload_machinename
    // and this slot is not supposed to be printed on the page until we need it
    // (lazyload), we need to make sure that the slot is removed after we render
    // the tag below.
    if (!_dfp_lazyload_get_slot_definition($ad_slot_machinename)) {
      // Store the slot to be removed later in hook_js_alter().
      _dfp_lazyload_slot_to_remove($ad_slot_machinename);
    }

    // Render the tag. This will add DFP javascript to the page. i.e. defineSlot().
    $rendered_tag = render($tag);

    // Now that the tags are rendered, DFP added the slot definitions to the page.
    // Lets get it.
    if ($ad_slot_value = _dfp_lazyload_get_slot_definition($ad_slot_machinename)) {
      $ad_slot .= '<script type="text/javascript">' . $ad_slot_value . '</script>' . PHP_EOL;
    }

    // Append the rendered tag.
    $ad_slot .= $rendered_tag;

    // Load the ads even if "initial ad load" from dfp module is disabled.
    if (variable_get('dfp_disable_init_load', 1)) {
      $ad_slot = str_ireplace('googletag.pubads().disableInitialLoad();', '', $ad_slot);
    }
  }

  return $ad_slot;
}

/**
 * Implements hook_page_build().
 *
 */
function dfp_lazyload_page_alter(&$page) {
  if (path_is_admin(current_path())) {
    return;
  }

  $ad_slot_machinename = variable_get('dfp_lazyload_machinename');
  $frequency = variable_get('dfp_lazyload_frequency', 3);
  $rendered_slot = dfp_lazyload_load_slot($ad_slot_machinename, $frequency);

  drupal_add_js(array(
    'dfpLazyload' => array(
      'config' => array(
        'ad_slot_machinename' => $ad_slot_machinename,
        'frequency' => $frequency,
        'rendered_slot' => $rendered_slot,
      ),
    ),
  ), 'setting');
}

/**
 * Helper to loop the js added and check if the slot definition provided is available.
 *
 * @param $ad_slot_machinename String The machine name of the slot.
 */
function _dfp_lazyload_get_slot_definition($ad_slot_machinename) {
  // Check for needed JavaScript respecting the key order from $pieces.
  foreach (drupal_add_js() as $key => $value) {
    if (isset($value['data']) && !is_array($value['data']) && strstr($value['data'], 'googletag')) {
      if (preg_match('/' . 'googletag\.slots\[\"' . $ad_slot_machinename . '\"\]\s*=\s*googletag\.define[^\(]*?Slot\(' . '/', $value['data'])) {
        return $value['data'];
      }
    }
  }
}

/**
 * Helper to statically store the slot to be removed in hook_js_alter().
 *
 * @param $ad_slot_machinename String The machine name of the slot.
 */
function _dfp_lazyload_slot_to_remove($ad_slot_machinename = NULL) {
  $machinename = &drupal_static(__FUNCTION__, FALSE);
  if (!empty($ad_slot_machinename)) {
    $machinename = $ad_slot_machinename;
  }
  return $machinename;
}

/**
 * Helper to remove ad slot used primarily for lazy loading.
 *
 * @param $js
 */
function dfp_lazyload_js_alter(&$javascript) {
  $ad_slot_machinename = _dfp_lazyload_slot_to_remove();

  // Iterate of all javascript items to get dfp slots.
  foreach ($javascript as $key => $value) {
    if (isset($value['data']) && !is_array($value['data']) && strstr($value['data'], 'googletag')) {
      if (preg_match('/' . 'googletag\.slots\[\"' . $ad_slot_machinename . '\"\]\s*=\s*googletag\.define[^\(]*?Slot\(' . '/', $value['data'])) {
        unset($javascript[$key]);
        return;
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function dfp_lazyload_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'page_alter') {
    // We need to ensure that dfp_lazyload runs after dfp and context.
    $module = array('dfp_lazyload' => $implementations['dfp_lazyload']);
    unset($implementations['dfp_lazyload']);
    $implementations = $implementations + $module;
  }
}
